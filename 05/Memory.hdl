// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // アドレスが0x4000までならin loadはRAM。
    // アドレスが0x4000以上0x5FFF以下ならin, loadはスクリーン。
    DMux(in=load, sel=address[14], a=loadM, b=loadSTmp);
    Not(in=address[13], out=nad13);
    And(a=loadSTmp, b=nad13, out=loadS);
    RAM16K(in=in, load=loadM, address=address[0..13], out=outM);
    Screen(in=in, load=loadS, address=address[0..12], out=outS);
    // アドレスが0x6000(0b110000000000000)ならoutputはキーボード。
    // アドレスが0x6001以上ならoutputはfalse（無効なアドレスのため）
    // address[0..12], NOT(address[13]), NOT(address[14])が全て0であることを確認する。
    Keyboard(out=outK);
    Or8Way(in=address[0..7], out=or1);
    Not(in=address[14], out=nad14);
    Or8Way(in[0..4]=address[8..12], in[5]=nad13, in[6]=nad14, out=or2);
    Or(a=or1, b=or2, out=keyFlag);
    Mux4Way16(a=outS, b=outS, c=outK, sel[1]=address[13], sel[0]=keyFlag, out=outSorK);
    Mux16(a=outM, b=outSorK, sel=address[14], out=out);
}